// api/telegram-webhook.js

export default async function handler(request, response) {
    if (request.method === 'POST') {
        try {
            const BOT_TOKEN = process.env.BOT_TOKEN;
            const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;

            if (!BOT_TOKEN || !ADMIN_CHAT_ID) {
                console.error("BOT_TOKEN –∏–ª–∏ ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.");
                return response.status(500).send("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞");
            }

            const body = request.body; // Vercel –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–∞—Ä—Å–∏—Ç JSON —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞

            if (body && body.message && body.message.web_app_data) {
                const webAppData = body.message.web_app_data;
                const orderDataText = webAppData.data; // –≠—Ç–æ JSON —Å—Ç—Ä–æ–∫–∞ –∏–∑ Mini App
                const telegramUser = body.message.from;

                try {
                    const orderDetails = JSON.parse(orderDataText);

                    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    let messageText = `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n`;
                    messageText += `üë§ –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${telegramUser.first_name || ''} ${telegramUser.last_name || ''} (ID: ${telegramUser.id})\n`;
                    if (telegramUser.username) {
                        messageText += `Username: @${telegramUser.username}\n`;
                    }
                    messageText += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${orderDetails.phone}\n`;
                    
                    if (orderDetails.comment) {
                        messageText += `üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${orderDetails.comment}\n`;
                    }

                    messageText += `\nüõ† –£—Å–ª—É–≥–∏:\n`;
                    orderDetails.items.forEach(item => {
                        messageText += `- ${item.name} (${item.price} —Ä—É–±.)\n`;
                    });
                    messageText += `\nüí∞ –ò—Ç–æ–≥–æ: ${orderDetails.totalPrice} —Ä—É–±.`;

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ Telegram Bot API
                    const sendMessageUrl = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
                    
                    await fetch(sendMessageUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            chat_id: ADMIN_CHAT_ID,
                            text: messageText,
                            parse_mode: 'Markdown', // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Markdown –∏–ª–∏ HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        }),
                    });

                    console.log('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
                    return response.status(200).send('–ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞');

                } catch (e) {
                    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', e);
                    return response.status(400).send('–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞');
                }
            } else {
                // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—Ä—É–≥–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å web_app_data
                console.log('–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –Ω–µ —è–≤–ª—è—é—â–µ–µ—Å—è web_app_data:', body);
                return response.status(200).send('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –∑–∞—è–≤–∫–∞');
            }

        } catch (error) {
            console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:', error);
            return response.status(500).send('–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
        }
    } else {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
        return response.status(405).send('–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω');
    }
}