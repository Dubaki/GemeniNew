// File: api/create-order.js (–ü–û–õ–ù–ê–Ø –ó–ê–ú–ï–ù–ê)

export default async function handler(req, res) {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] /api/create-order: Request received! Method: ${req.method}, URL: ${req.url}`);

    res.setHeader('Access-Control-Allow-Origin', '*'); 
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
        console.log(`[${timestamp}] /api/create-order: Responding to OPTIONS preflight request`);
        res.status(204).end();
        return;
    }

    if (req.method !== 'POST') {
        console.log(`[${timestamp}] /api/create-order: Method Not Allowed (${req.method})`);
        res.setHeader('Allow', ['POST', 'OPTIONS']);
        res.status(405).json({ status: 'error', message: `Method ${req.method} Not Allowed` });
        return;
    }

    try {
        console.log(`[${timestamp}] /api/create-order: Processing POST request...`);
        const orderData = req.body;

        if (!orderData || typeof orderData !== 'object' || Object.keys(orderData).length === 0) {
            console.error(`[${timestamp}] /api/create-order: Invalid or empty request body received.`);
            return res.status(400).json({ status: 'error', message: 'Invalid or empty order data received.' });
        }

        console.log(`[${timestamp}] /api/create-order: Received order data:`, JSON.stringify(orderData, null, 2));

        // ----- –í–ê–®–ê –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ö–ê–ó–ê (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –∏ —Ç.–¥.) -----
        // ...
        // ------------------------------------------------------------------

        const botToken = process.env.TELEGRAM_BOT_TOKEN;
        const adminChatId = '–í–ê–®_TELEGRAM_ID_–î–õ–Ø_–£–í–ï–î–û–ú–õ–ï–ù–ò–ô_–ê–î–ú–ò–ù–£'; // –ó–∞–º–µ–Ω–∏—Ç–µ

        // --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ---
        if (botToken && adminChatId && adminChatId !== '–í–ê–®_TELEGRAM_ID_–î–õ–Ø_–£–í–ï–î–û–ú–õ–ï–ù–ò–ô_–ê–î–ú–ò–ù–£') {
            let adminMessageText = `üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç Mini App!</b>\n\n`;
            adminMessageText += `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${orderData.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
            if (orderData.userInfo) {
                adminMessageText += `<b>–ö–ª–∏–µ–Ω—Ç:</b> ${orderData.userInfo.first_name || ''} ${orderData.userInfo.last_name || ''} (@${orderData.userInfo.username || '–Ω–µ—Ç username'}, ID: ${orderData.userInfo.id})\n`;
            }
            adminMessageText += `<b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> ${orderData.totalPrice || 0} ‚ÇΩ\n\n`;
            adminMessageText += `<b>–ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n`;
            if (orderData.items && orderData.items.length > 0) {
                orderData.items.forEach(item => {
                    adminMessageText += `- ${item.title}\n`;
                });
            } else {
                adminMessageText += `- –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n`;
            }
            // ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
            try {
                const adminNotifyResponse = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                    method: 'POST', headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ chat_id: adminChatId, text: adminMessageText, parse_mode: 'HTML' })
                });
                const adminNotifyResult = await adminNotifyResponse.json();
                if (adminNotifyResult.ok) console.log(`[${timestamp}] /api/create-order: Admin notification sent.`);
                else console.error(`[${timestamp}] /api/create-order: Failed to send admin notification:`, adminNotifyResult);
            } catch (notifyError) { console.error(`[${timestamp}] /api/create-order: Error sending admin notification:`, notifyError); }
        }
        
        // --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —á–∞—Ç ---
        if (orderData.userInfo && orderData.userInfo.id && botToken) {
            const userChatId = orderData.userInfo.id;
            let userMessageText = "<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n";
            if (orderData.items && orderData.items.length > 0) {
                userMessageText += "–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —É—Å–ª—É–≥–∏:\n";
                orderData.items.forEach(item => {
                    userMessageText += `- ${item.title}\n`;
                });
                userMessageText += "\n";
            }
            userMessageText += `–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º —Å –Ω–æ–º–µ—Ä–∞, –æ–∫–æ–Ω—á–∞–Ω–∏–µ 0911, –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.`;
            
            try {
                const userNotifyResponse = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
                    method: 'POST', headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ chat_id: userChatId, text: userMessageText, parse_mode: 'HTML' })
                });
                const userNotifyResult = await userNotifyResponse.json();
                if (userNotifyResult.ok) console.log(`[${timestamp}] /api/create-order: User confirmation sent to ${userChatId}.`);
                else console.error(`[${timestamp}] /api/create-order: Failed to send user confirmation:`, userNotifyResult);
            } catch (notifyError) { console.error(`[${timestamp}] /api/create-order: Error sending user confirmation:`, notifyError); }
        }

        console.log(`[${timestamp}] /api/create-order: Order processed (notifications attempt made).`);
        res.status(200).json({
            status: 'success',
            message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω! –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ —á–∞—Ç.',
            receivedOrderId: `ORDER_${Date.now()}`
        });

    } catch (error) {
        // ... (–±–ª–æ–∫ catch –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        console.error(`[${timestamp}] !!! UNEXPECTED ERROR in /api/create-order !!!`);
        console.error(`[${timestamp}] Error message: ${error.message}`);
        console.error(`[${timestamp}] Error stack: ${error.stack}`);
        if (req?.body) {
             try {
                 console.error(`[${timestamp}] Request body during error:`, JSON.stringify(req.body, null, 2));
             } catch {
                 console.error(`[${timestamp}] Request body during error (raw):`, req.body);
             }
        }
        res.status(500).json({ status: 'error', message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.' });
    }
}
