// File: api/create-order.js (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ö–û–î)

export default async function handler(req, res) {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] /api/create-order: Request received! Method: ${req.method}, URL: ${req.url}`);

    // --- –ù–ê–ß–ê–õ–û –ë–õ–û–ö–ê CORS ---
    res.setHeader('Access-Control-Allow-Origin', '*'); // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç–µ '*' –Ω–∞ URL –≤–∞—à–µ–≥–æ Mini App
    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

    if (req.method === 'OPTIONS') {
        console.log(`[${timestamp}] /api/create-order: Responding to OPTIONS preflight request`);
        res.status(204).end();
        return;
    }
    // --- –ö–û–ù–ï–¶ –ë–õ–û–ö–ê CORS ---

    if (req.method !== 'POST') {
        console.log(`[${timestamp}] /api/create-order: Method Not Allowed (${req.method})`);
        res.setHeader('Allow', ['POST', 'OPTIONS']);
        res.status(405).json({ status: 'error', message: `Method ${req.method} Not Allowed` });
        return;
    }

    try {
        console.log(`[${timestamp}] /api/create-order: Processing POST request...`);
        const orderData = req.body;

        if (!orderData || typeof orderData !== 'object' || Object.keys(orderData).length === 0) {
            console.error(`[${timestamp}] /api/create-order: Invalid or empty request body received.`);
            return res.status(400).json({ status: 'error', message: 'Invalid or empty order data received.' });
        }

        console.log(`[${timestamp}] /api/create-order: Received order data:`, JSON.stringify(orderData, null, 2));

        // ----- –í–ê–®–ê –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ö–ê–ó–ê (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –∏ —Ç.–¥.) -----
        // ... (–∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∑–∞–∫–∞–∑, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ...
        // ------------------------------------------------------------------

        // ----- –û–¢–ü–†–ê–í–ö–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –í TELEGRAM -----
        const botToken = process.env.TELEGRAM_BOT_TOKEN; // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Vercel
        const targetChatId = '–í–ê–®_TELEGRAM_ID_–î–õ–Ø_–£–í–ï–î–û–ú–õ–ï–ù–ò–ô'; // <--- –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û –ù–ê –ù–£–ñ–ù–´–ô ID

        if (!botToken) {
            console.error(`[${timestamp}] /api/create-order: TELEGRAM_BOT_TOKEN is not set in environment variables.`);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–∫–∞–∑, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        } else if (!targetChatId || targetChatId === '–í–ê–®_TELEGRAM_ID_–î–õ–Ø_–£–í–ï–î–û–ú–õ–ï–ù–ò–ô') {
            console.error(`[${timestamp}] /api/create-order: targetChatId is not set correctly.`);
        } else {
            let messageText = `üîî <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n`;
            messageText += `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${orderData.phone || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n`;
            if (orderData.userInfo) {
                messageText += `<b>–ö–ª–∏–µ–Ω—Ç:</b> ${orderData.userInfo.first_name || ''} ${orderData.userInfo.last_name || ''} (@${orderData.userInfo.username || '–Ω–µ—Ç username'})\n`;
            }
            messageText += `<b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> ${orderData.totalPrice || 0} ‚ÇΩ\n\n`;
            messageText += `<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n`;
            if (orderData.items && orderData.items.length > 0) {
                orderData.items.forEach(item => {
                    messageText += `- ${item.title} (ID: ${item.id}) x ${item.quantity} = ${item.price * item.quantity} ‚ÇΩ\n`;
                });
            } else {
                messageText += `- –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n`;
            }
            if (orderData.comment) {
                messageText += `\n<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${orderData.comment}\n`;
            }

            const telegramApiUrl = `https://api.telegram.org/bot${botToken}/sendMessage`;
            try {
                const notificationResponse = await fetch(telegramApiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        chat_id: targetChatId,
                        text: messageText,
                        parse_mode: 'HTML' // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (<b>, <i>, <a>, <pre>, <code>)
                    })
                });
                const notificationResult = await notificationResponse.json();
                if (notificationResult.ok) {
                    console.log(`[${timestamp}] /api/create-order: Admin notification sent successfully to chat_id ${targetChatId}.`);
                } else {
                    console.error(`[${timestamp}] /api/create-order: Failed to send admin notification. Response:`, JSON.stringify(notificationResult));
                }
            } catch (notifyError) {
                console.error(`[${timestamp}] /api/create-order: Error sending admin notification:`, notifyError);
            }
        }
        // --- –ö–û–ù–ï–¶ –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ---

        console.log(`[${timestamp}] /api/create-order: Order processed (notification attempt made).`);
        res.status(200).json({
            status: 'success',
            message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è!',
            receivedOrderId: `ORDER_${Date.now()}`
        });

    } catch (error) {
        console.error(`[${timestamp}] !!! UNEXPECTED ERROR in /api/create-order !!!`);
        console.error(`[${timestamp}] Error message: ${error.message}`);
        console.error(`[${timestamp}] Error stack: ${error.stack}`);
        if (req?.body) {
             try {
                 console.error(`[${timestamp}] Request body during error:`, JSON.stringify(req.body, null, 2));
             } catch {
                 console.error(`[${timestamp}] Request body during error (raw):`, req.body);
             }
        }
        res.status(500).json({ status: 'error', message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.' });
    }
}
